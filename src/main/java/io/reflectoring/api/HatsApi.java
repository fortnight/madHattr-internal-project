/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.2.3).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package io.reflectoring.api;

import io.reflectoring.model.Hat;
import io.reflectoring.model.NewHat;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-10-27T10:57:25.142-04:00[America/New_York]")

@Validated
@Api(value = "hats", description = "the hats API")
public interface HatsApi {

    default HatsApiDelegate getDelegate() {
        return new HatsApiDelegate() {};
    }

    /**
     * POST /hats : Create a newHat
     * Creates a new instance of a &#x60;newHat&#x60;.
     *
     * @param body A new &#x60;newHat&#x60; to be created. Ids will be generated and added to allow newHat to become a Hat object. (required)
     * @return Successful response. (status code 201)
     */
    @ApiOperation(value = "Create a newHat", nickname = "createNewHat", notes = "Creates a new instance of a `newHat`.", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Successful response.") })
    @RequestMapping(value = "/hats",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> createNewHat(@ApiParam(value = "A new `newHat` to be created. Ids will be generated and added to allow newHat to become a Hat object." ,required=true )  @Valid @RequestBody NewHat body) {
        return getDelegate().createNewHat(body);
    }


    /**
     * DELETE /hats/{hatId} : Delete a Hat
     * Deletes an existing &#x60;Hat&#x60;.
     *
     * @param hatId A unique identifier for a &#x60;Hat&#x60;. (required)
     * @return Successful response. (status code 204)
     */
    @ApiOperation(value = "Delete a Hat", nickname = "deleteHat", notes = "Deletes an existing `Hat`.", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Successful response.") })
    @RequestMapping(value = "/hats/{hatId}",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteHat(@ApiParam(value = "A unique identifier for a `Hat`.",required=true) @PathVariable("hatId") String hatId) {
        return getDelegate().deleteHat(hatId);
    }


    /**
     * GET /hats/{hatId} : Get a Hat
     * Gets the details of a single instance of a &#x60;Hat&#x60;.
     *
     * @param hatId A unique identifier for a &#x60;Hat&#x60;. (required)
     * @return Successful response - returns a single &#x60;Hat&#x60;. (status code 200)
     */
    @ApiOperation(value = "Get a Hat", nickname = "getHat", notes = "Gets the details of a single instance of a `Hat`.", response = Hat.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response - returns a single `Hat`.", response = Hat.class) })
    @RequestMapping(value = "/hats/{hatId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Hat> getHat(@ApiParam(value = "A unique identifier for a `Hat`.",required=true) @PathVariable("hatId") String hatId) {
        return getDelegate().getHat(hatId);
    }


    /**
     * GET /hats : List All Hats
     * Gets a list of all &#x60;Hat&#x60; entities.
     *
     * @return Successful response - returns an array of &#x60;Hat&#x60; entities. (status code 200)
     */
    @ApiOperation(value = "List All Hats", nickname = "getHats", notes = "Gets a list of all `Hat` entities.", response = Hat.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response - returns an array of `Hat` entities.", response = Hat.class, responseContainer = "List") })
    @RequestMapping(value = "/hats",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<Hat>> getHats() {
        return getDelegate().getHats();
    }


    /**
     * PUT /hats/{hatId} : Update a Hat
     * Updates an existing &#x60;Hat&#x60;.
     *
     * @param hatId A unique identifier for a &#x60;Hat&#x60;. (required)
     * @param body Updated &#x60;Hat&#x60; information. (required)
     * @return Hat object properly updated. (status code 202)
     */
    @ApiOperation(value = "Update a Hat", nickname = "updateHat", notes = "Updates an existing `Hat`.", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 202, message = "Hat object properly updated.") })
    @RequestMapping(value = "/hats/{hatId}",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> updateHat(@ApiParam(value = "A unique identifier for a `Hat`.",required=true) @PathVariable("hatId") String hatId,@ApiParam(value = "Updated `Hat` information." ,required=true )  @Valid @RequestBody Hat body) {
        return getDelegate().updateHat(hatId, body);
    }

}
